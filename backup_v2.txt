`````````````````````````````````````````code with story woven around vsp```````````````
from flask import Flask, render_template, request, send_file, session, redirect, url_for, flash
import sqlite3
import os
import tempfile
import re
from docx import Document
from docx.shared import Pt
from docx.enum.text import WD_ALIGN_PARAGRAPH

# OpenAI Python client
from openai import OpenAI

# ----------------- Config -----------------
DB_PATH = "companies.db"
APP_SECRET = os.getenv("FLASK_SECRET")
HIDE_VSP_FROM_DOCX = True
VSP_VISIBLE_IN_UI = True     # ✅ visible in result page
OPENAI_MODEL = "gpt-4o"      # ✅ switched to GPT-4o
TEMPERATURE_VSP = 1
MAX_TOKENS_VSP = 1700
TEMPERATURE_EXEC = 1
MAX_TOKENS_EXEC = 1700

# ----------------- Flask -----------------
app = Flask(__name__)
app.secret_key = APP_SECRET

# ----------------- OpenAI -----------------
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"),
                organization=os.getenv("OPENAI_ORG_ID"))

# ----------------- In-memory storage -----------------
storage = {}

# ----------------- DB Helpers -----------------
def init_db():
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS companies (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            industry TEXT,
            services TEXT,
            differentiators TEXT,
            contact_email TEXT,
            contact_phone TEXT,
            website TEXT,
            notes TEXT
        )
    """)
    conn.commit()
    conn.close()

def insert_company(profile):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute(
        """INSERT INTO companies 
        (name, industry, services, differentiators, contact_email, contact_phone, website, notes) 
        VALUES (?, ?, ?, ?, ?, ?, ?, ?)""",
        (profile.get("name"), profile.get("industry"), profile.get("services"),
         profile.get("differentiators"), profile.get("contact_email"), profile.get("contact_phone"),
         profile.get("website"), profile.get("notes"))
    )
    conn.commit()
    company_id = cur.lastrowid
    conn.close()
    return company_id

def get_companies():
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT id, name, industry FROM companies ORDER BY name")
    rows = cur.fetchall()
    conn.close()
    return rows

def get_company(company_id):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("""SELECT id, name, industry, services, differentiators, contact_email, 
                   contact_phone, website, notes 
                   FROM companies WHERE id = ?""", (company_id,))
    row = cur.fetchone()
    conn.close()
    if not row:
        return None
    keys = ["id", "name", "industry", "services", "differentiators", 
            "contact_email", "contact_phone", "website", "notes"]
    return dict(zip(keys, row))

# ----------------- Text cleaning -----------------
def clean_text_block(text: str) -> str:
    if not text:
        return ""
    text = str(text)
    text = re.sub(r"\*\*(.*?)\*\*", r"\1", text)
    text = re.sub(r"\*(.*?)\*", r"\1", text)
    text = re.sub(r"^#+\s*", "", text, flags=re.MULTILINE)
    text = re.sub(r"•\s*", "- ", text, flags=re.MULTILINE)
    text = re.sub(r"\r\n", "\n", text)
    text = re.sub(r"\n{3,}", "\n\n", text)
    return text.strip()

# ----------------- Prompts -----------------

# ✅ Executive Summary (weaving story around VSP)
EXEC_PROMPT_TEMPLATE = """
You are a senior management consultant. Using the provider profile and VSP, produce a polished,
client-ready Executive Summary in persuasive consulting tone.

Requirements:
- Length: 600–900 words
- Do NOT use Markdown, symbols, or placeholders.
- Structure must be exactly as listed below.
- The Executive Summary should weave its narrative directly around the VSP phrases.
- Do not dilute, paraphrase, or change VSP language — instead, expand and contextualize it with
  connecting sentences, industry insights, and tailored explanation.
- Every section should feel like a story where VSP bullets are lifted and explained in detail.

Sections (in order):

1) Introduction
- 2–3 sentences max introducing provider and relevance.

2) Our Understanding of Your Goals
- Use "Case for Change" VSP bullets as the anchor.
- Weave each VSP phrase into a flowing narrative that reflects the client’s industry context.
- End with one sentence bridging to solution.

3) Our Approach to Meeting Your Goals
- Use "Business Value for the Client" VSP bullets as anchors.
- Present them as clear goals, each expanded into explanation.
- Bullet format required, but each bullet must be enriched into 2–3 sentence mini-stories.

4) Solution Overview
- Use "{provider_name} Proposed Solution" VSP bullets as anchors.
- Each bullet should be retained exactly and expanded into 2–3 sentence explanation.
- Must look like a stepwise, compelling solution design.

5) How We Will Deliver
- Expand on "{provider_name} Proposed Solution" bullets to describe implementation.
- 3–4 bullets required, written as execution steps aligned with client goals.

6) Why {provider_name}
- Highlight differentiators from provider profile.
- Explicitly tie back to "{provider_name} Proposed Solution" bullets that emphasize risk reduction and faster outcomes.
- Use bullets for clarity.

7) Closing Call-to-Action
- A strong, persuasive paragraph urging client to engage now, linking back to urgency and measurable benefits.

Inputs:
- PROVIDER_PROFILE:
{provider_profile}
- VSP:
{vsp_resp}
- Website of provider:
{website}
- CLIENT_CONTEXT:
{client_context}
"""

# ✅ VSP (reusable crisp phrases)
def get_vsp_prompt(company, provider_profile_text, client_context):
    return f"""
You are a senior management consultant. Based on the provider profile and client context,
generate a Value Selling Points (VSP) document.

Guidelines:
- Write in clear, client-ready business language.
- DO NOT use Markdown, symbols (#, *, **), or placeholders.
- Each bullet must be a strong business phrase that can be reused directly in an Executive Summary.
- Keep bullets crisp but meaningful (1–2 lines max).
- Structure exactly as below.

Sections (use headings exactly as written):

1) Case for Change
- State why this proposition is necessary
- Explain urgency (why now)
- Identify key business issues

2) Business Value for the Client
- Map business benefits to those issues
- Focus on hard, tangible outcomes: revenue, EBITDA, margins, costs, working capital, faster time to market
- Ensure at least one phrase showing measurable first-year value
- Link benefits clearly to gaps mentioned in Case for Change

3) {company['name']} Proposed Solution
- Describe proposed solution in phrases
- Emphasize unique/innovative parts of the solution
- Show how it enables business value
- Highlight {company['name']}’s role in delivering faster outcomes and reducing risk

Inputs:
- PROVIDER_PROFILE:
{provider_profile_text}

- CLIENT_CONTEXT:
{client_context}
"""

# ----------------- Routes -----------------
@app.route("/setup", methods=["GET", "POST"])
def setup():
    if request.method == "POST":
        profile = {
            "name": request.form.get("name", "").strip(),
            "industry": request.form.get("industry", "").strip(),
            "services": request.form.get("services", "").strip(),
            "differentiators": request.form.get("differentiators", "").strip(),
            "contact_email": request.form.get("contact_email", "").strip(),
            "contact_phone": request.form.get("contact_phone", "").strip(),
            "website": request.form.get("website", "").strip(),
            "notes": request.form.get("notes", "").strip()
        }
        if not profile["name"]:
            flash("Company name is required", "warning")
            return render_template("setup.html", profile=profile)
        company_id = insert_company(profile)
        flash(f"Company profile '{profile['name']}' created.", "success")
        return redirect(url_for("index", company_id=company_id))
    return render_template("setup.html")

@app.route("/", methods=["GET", "POST"])
def index():
    companies = get_companies()
    default_company_id = request.args.get("company_id")
    if request.method == "POST":
        company_id = int(request.form.get("company_id"))
        company = get_company(company_id)
        if not company:
            flash("Selected company not found.", "danger")
            return redirect(url_for("setup"))

        client_name = request.form.get("client_name", "Client").strip()
        client_industry = request.form.get("client_industry", "").strip()
        client_goals = request.form.get("client_goals", "").strip()
        proposal_modules = request.form.get("proposal_modules", "").strip()
        execution_model = request.form.get("execution_model", "").strip()
        extra_notes = request.form.get("extra_notes", "").strip()

        client_context = f"""
Client Name: {client_name}
Client Industry: {client_industry}
Goals/Challenges: {client_goals}
Proposed Modules: {proposal_modules}
Execution Model: {execution_model}
Additional Notes: {extra_notes}
""".strip()

        session_id = os.urandom(8).hex()
        session["id"] = session_id
        storage[session_id] = {"client_context": client_context, "draft": "", "vsp": "", "company_id": company_id}

        provider_profile_text = f"{company['name']} (Industry: {company['industry']}). Services: {company['services']}. Differentiators: {company['differentiators']}. Website: {company['website']}. Contact: {company['contact_email']} | {company['contact_phone']}."

        # ✅ Generate VSP
        vsp_prompt = get_vsp_prompt(company, provider_profile_text, client_context)
        try:
            vsp_resp = client.chat.completions.create(
                model=OPENAI_MODEL,
                messages=[
                    {"role": "system", "content": "You are an expert proposal writer."},
                    {"role": "user", "content": vsp_prompt}
                ],
                temperature=TEMPERATURE_VSP,
                max_completion_tokens=MAX_TOKENS_VSP
            )
            vsp_text = clean_text_block(vsp_resp.choices[0].message.content.strip())
        except Exception as e:
            vsp_text = f"VSP generation failed: {e}"

        storage[session_id]["vsp"] = vsp_text

        # ✅ Generate Executive Summary using VSP
        exec_prompt = EXEC_PROMPT_TEMPLATE.format(
            provider_profile=provider_profile_text,
            client_context=client_context,
            provider_name=company['name'],
            website=company["website"],
            vsp_resp=vsp_text
        )

        try:
            exec_resp = client.chat.completions.create(
                model=OPENAI_MODEL,
                messages=[
                    {"role": "system", "content": "You are a senior management consultant writing client-ready executive summaries."},
                    {"role": "user", "content": exec_prompt}
                ],
                temperature=TEMPERATURE_EXEC,
                max_completion_tokens=MAX_TOKENS_EXEC
            )
            exec_text = clean_text_block(exec_resp.choices[0].message.content.strip())
        except Exception as e:
            exec_text = f"Executive Summary generation failed: {e}"

        storage[session_id]["draft"] = exec_text

        return redirect(url_for("result"))

    return render_template("index.html", companies=companies, default_company_id=default_company_id)

# ----------------- Result Route -----------------
@app.route("/result", methods=["GET", "POST"])
def result():
    session_id = session.get("id")
    if not session_id or session_id not in storage:
        flash("No active proposal found. Please generate one.", "warning")
        return redirect(url_for("index"))

    data = storage[session_id]
    draft = data.get("draft", "")
    vsp = data.get("vsp", "")
    client_context = data.get("client_context", "")
    company_id = data.get("company_id")
    company = get_company(company_id) if company_id else None

    if request.method == "POST":

        # ---------- Refine ----------
        if "refine" in request.form:
            refine_input = request.form.get("refine_prompt", "").strip()
            if not refine_input:
                flash("Refine instructions cannot be empty.", "warning")
                return render_template("result.html", draft=draft, vsp=vsp,
                                       context=client_context, company=company, show_vsp=VSP_VISIBLE_IN_UI)

            refine_prompt = f"""
Refine the following Executive Summary applying these instructions exactly:
{refine_input}

Current Executive Summary:
{draft}

Rules:
- Keep structure intact (Intro, Goals, Approach, Solution, Delivery, Why Provider, Closing)
- Expand sections where appropriate, do not shorten unless requested
- Use '-' for bullets
- Do NOT add Markdown or placeholders
"""
            try:
                refine_resp = client.chat.completions.create(
                    model=OPENAI_MODEL,
                    messages=[
                        {"role": "system", "content": "You are a professional consultant refining executive summaries."},
                        {"role": "user", "content": refine_prompt}
                    ],
                    temperature=TEMPERATURE_EXEC,
                    max_tokens=1500
                )
                draft = clean_text_block(refine_resp.choices[0].message.content.strip())
                storage[session_id]["draft"] = draft
            except Exception as e:
                flash(f"Refine failed: {e}", "danger")

        # ---------- Download ----------
        elif "download" in request.form:
            doc = Document()
            doc.add_heading(f"Executive Summary by {company['name'] if company else 'Provider'}", level=0)

            # -------- Executive Summary --------
            for line in draft.split("\n"):
                if not line.strip():
                    continue
                stripped = line.strip()
                lower = stripped.lower()

                # Recognize headings
                if lower.startswith("introduction"):
                    title = "Introduction"
                elif lower.startswith("our understanding"):
                    title = "Our Understanding of Your Goals"
                elif lower.startswith("our approach"):
                    title = "Our Approach to Meeting Your Goals"
                elif lower.startswith("solution overview"):
                    title = "Solution Overview"
                elif lower.startswith("how we will deliver"):
                    title = "How We Will Deliver"
                elif lower.startswith("why"):
                    title = f"Why {company['name'] if company else 'Provider'}"
                elif lower.startswith("closing"):
                    title = "Closing Call-to-Action"
                else:
                    title = None

                if title:
                    para = doc.add_paragraph(title)
                    run = para.runs[0]
                    run.bold = True
                    run.font.size = Pt(14)
                    para.paragraph_format.alignment = WD_ALIGN_PARAGRAPH.LEFT
                    para.paragraph_format.space_after = Pt(12)

                elif stripped.startswith("- "):  # Bullet point
                    para = doc.add_paragraph(stripped[2:], style="List Bullet")
                    para.paragraph_format.space_after = Pt(6)

                else:  # Normal text
                    para = doc.add_paragraph(stripped)
                    para.paragraph_format.alignment = WD_ALIGN_PARAGRAPH.JUSTIFY
                    para.paragraph_format.space_after = Pt(12)

            # -------- Contact Info --------
            doc.add_page_break()
            doc.add_heading("Contact Information", level=1)
            if company:
                contact_block = [
                    f"Email: {company.get('contact_email', 'N/A')}",
                    f"Phone: {company.get('contact_phone', 'N/A')}",
                    f"Website: {company.get('website', 'N/A')}"
                ]
                for item in contact_block:
                    para = doc.add_paragraph(item)
                    para.paragraph_format.alignment = WD_ALIGN_PARAGRAPH.LEFT
                    para.paragraph_format.space_after = Pt(6)

            # -------- VSP Section --------
            doc.add_page_break()
            doc.add_heading(f"Value Selling Points by {company['name'] if company else 'Provider'}", level=0)

            for line in vsp.split("\n"):
                if not line.strip():
                    continue
                stripped = line.strip()
                lower = stripped.lower()

                # Recognize headings
                if lower.startswith("case for change"):
                    title = "Case for Change"
                elif lower.startswith("business value"):
                    title = "Business Value for the Client"
                elif lower.startswith(company['name'].lower()) or lower.startswith("proposed solution"):
                    title = f"{company['name']} Proposed Solution"
                else:
                    title = None

                if title:
                    para = doc.add_paragraph(title)
                    run = para.runs[0]
                    run.bold = True
                    run.font.size = Pt(14)
                    para.paragraph_format.alignment = WD_ALIGN_PARAGRAPH.LEFT
                    para.paragraph_format.space_after = Pt(12)

                elif stripped.startswith("- "):  # Bullet point
                    para = doc.add_paragraph(stripped[2:], style="List Bullet")
                    para.paragraph_format.space_after = Pt(6)

                else:  # Normal text
                    para = doc.add_paragraph(stripped)
                    para.paragraph_format.alignment = WD_ALIGN_PARAGRAPH.JUSTIFY
                    para.paragraph_format.space_after = Pt(12)

            # -------- Save File --------
            tmp_file = tempfile.NamedTemporaryFile(delete=False, suffix=".docx")
            doc.save(tmp_file.name)
            return send_file(tmp_file.name, as_attachment=True, download_name="Executive_Summary.docx")

        # ---------- Finish ----------
        elif "finish" in request.form:
            storage.pop(session_id, None)
            session.clear()
            flash("Session cleared.", "info")
            return redirect(url_for("index"))

    return render_template("result.html", draft=draft, vsp=vsp,
                           context=client_context, company=company, show_vsp=VSP_VISIBLE_IN_UI)

if __name__ == "__main__":
    init_db()
    app.run(debug=True, host="0.0.0.0", port=5000)
